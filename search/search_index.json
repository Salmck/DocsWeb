{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6570\u7406\u7edf\u8ba1 \u603b\u4f53\uff1a\u7814\u7a76\u5bf9\u8c61\u7684\u5168\u4f53 \u4e2a\u4f53\uff1a\u7ec4\u6210\u603b\u4f53\u7684\u6bcf\u4e2a\u5143\u7d20 \u62bd\u6837\uff1a(\u539f\u56e0)\u4e3a\u63a8\u65ad\u603b\u4f53\u5206\u5e03\u53ca\u5404\u79cd\u7279\u5f81\uff0c(\u65b9\u6cd5)\u6309\u7167\u4e00\u5b9a\u89c4\u5219\u4ece\u603b\u4f53\u4e2d\u62bd\u53d6\u82e5\u5e72\u4e2a\u4f53\u8fdb\u884c\u89c2\u5bdf\u5b9e\u9a8c\uff0c(\u76ee\u6807)\u4ee5\u83b7\u5f97\u6709\u5173\u603b\u4f53\u7684\u4fe1\u606f\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u79f0\u4e3a\u62bd\u6837\u3002 \u6837\u672c\uff1a\u4ece\u603b\u4f53\u4e2d\u62bd\u53d6\u7684\u90e8\u5206\u4e2a\u4f53\u3002 \u6837\u672c\u5bb9\u91cf\uff1a\u6837\u672c\u4e2d\u6240\u5305\u542b\u7684\u4e2a\u4f53\u6570\u76ee\u3002 \u6837\u672c\u503c\uff1a\u6837\u672c\u7684\u89c2\u6d4b\u503c\u3002 \u7b80\u5355\u968f\u673a\u62bd\u6837\uff1a\u2460 x1...xn\u548c\u603b\u4f53\u5206\u5e03\u76f8\u540c \u2461 x1...xn\u9879\u76ee\u72ec\u7acb \u5927\u6570\u5b9a\u7406","title":"\u4ecb\u7ecd"},{"location":"#_1","text":"\u603b\u4f53\uff1a\u7814\u7a76\u5bf9\u8c61\u7684\u5168\u4f53 \u4e2a\u4f53\uff1a\u7ec4\u6210\u603b\u4f53\u7684\u6bcf\u4e2a\u5143\u7d20 \u62bd\u6837\uff1a(\u539f\u56e0)\u4e3a\u63a8\u65ad\u603b\u4f53\u5206\u5e03\u53ca\u5404\u79cd\u7279\u5f81\uff0c(\u65b9\u6cd5)\u6309\u7167\u4e00\u5b9a\u89c4\u5219\u4ece\u603b\u4f53\u4e2d\u62bd\u53d6\u82e5\u5e72\u4e2a\u4f53\u8fdb\u884c\u89c2\u5bdf\u5b9e\u9a8c\uff0c(\u76ee\u6807)\u4ee5\u83b7\u5f97\u6709\u5173\u603b\u4f53\u7684\u4fe1\u606f\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u79f0\u4e3a\u62bd\u6837\u3002 \u6837\u672c\uff1a\u4ece\u603b\u4f53\u4e2d\u62bd\u53d6\u7684\u90e8\u5206\u4e2a\u4f53\u3002 \u6837\u672c\u5bb9\u91cf\uff1a\u6837\u672c\u4e2d\u6240\u5305\u542b\u7684\u4e2a\u4f53\u6570\u76ee\u3002 \u6837\u672c\u503c\uff1a\u6837\u672c\u7684\u89c2\u6d4b\u503c\u3002 \u7b80\u5355\u968f\u673a\u62bd\u6837\uff1a\u2460 x1...xn\u548c\u603b\u4f53\u5206\u5e03\u76f8\u540c \u2461 x1...xn\u9879\u76ee\u72ec\u7acb","title":"\u6570\u7406\u7edf\u8ba1"},{"location":"#_2","text":"","title":"\u5927\u6570\u5b9a\u7406"},{"location":"docs/aes%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95python%E5%AE%9E%E7%8E%B0/","text":"\u6ce8\u610f\uff1aECB\u6a21\u5f0f\u4e0d\u5b89\u5168\uff01\uff01\uff01\u6700\u597d\u7528CBC\u6a21\u5f0f\u3002\u53c2\u8003\u7f51\u9875\uff1a https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_block_chaining_(CBC) \u539f\u7406 AES\u7684\u52a0\u5bc6\u6d41\u7a0b\uff1a \u628a\u660e\u6587\u6309\u7167128bit\u62c6\u5206\u6210\u82e5\u5e72\u4e2a\u660e\u6587\u5757\u3002 \u6309\u7167\u9009\u62e9\u7684\u586b\u5145\u65b9\u5f0f\u6765\u586b\u5145\u6700\u540e\u4e00\u4e2a\u660e\u6587\u5757\u3002 \u6bcf\u4e00\u4e2a\u660e\u6587\u5757\u5229\u7528AES\u52a0\u5bc6\u5668\u548c\u5bc6\u94a5\uff0c\u52a0\u5bc6\u6210\u5bc6\u6587\u5757\u3002 \u62fc\u63a5\u6240\u6709\u7684\u5bc6\u6587\u5757\uff0c\u6210\u4e3a\u6700\u7ec8\u7684\u5bc6\u6587\u7ed3\u679c\u3002 \u60f3\u8981\u641e\u660e\u767dAES\u7b97\u6cd5\uff0c\u9996\u5148\u8981\u641e\u6e05\u695a\u4e09\u4e2a\u57fa\u672c\u6982\u5ff5\u3002\u79d8\u94a5\uff0c\u586b\u5145\uff0c\u6a21\u5f0f \u79d8\u94a5\uff1a \u5bf9\u79f0\u52a0\u5bc6\u4e4b\u6240\u4ee5\u5bf9\u79f0\u5c31\u662f\u56e0\u4e3a\u8fd9\u7c7b\u7b97\u6cd5\u5bf9\u660e\u6587\u7684\u52a0\u5bc6\u548c\u89e3\u5bc6\u4f7f\u7528\u7684\u662f\u540c\u4e00\u4e2a\u5bc6\u94a5\u3002 AES\u652f\u6301\u4e09\u79cd\u957f\u5ea6\u7684\u5bc6\u94a5\uff1a128\u4f4d\uff0c192\u4f4d\uff0c256\u4f4d \u586b\u5145\uff1a \u8bf4\u5230\u586b\u5145\u4e00\u5b9a\u8981\u8bf4\u4e00\u4e0b\uff0cAES \u5206\u7ec4\u52a0\u5bc6\u7684\u7279\u6027\uff0cAES \u52a0\u5bc6\u5e76\u4e0d\u662f\u4e00\u80a1\u8111\u5c06\u660e\u6587\u52a0\u5bc6\u6210\u5bc6\u6587\u7684\uff0c\u800c\u662f\u628a\u660e\u6587\u62c6\u5206\u6210\u4e00\u4e2a\u4e2a\u72ec\u7acb\u7684\u660e\u6587\u5757\uff0c\u4e14\u6bcf\u4e2a\u660e\u6587\u5757128bit\u3002 \u5047\u5982\u4e00\u6bb5\u660e\u6587\u957f\u5ea6\u662f196bit\uff0c\u5982\u679c\u6309\u6bcf128bit\u4e00\u4e2a\u660e\u6587\u5757\u6765\u62c6\u5206\u7684\u8bdd\uff0c\u7b2c\u4e8c\u4e2a\u660e\u6587\u5757\u53ea\u670964bit\uff0c\u4e0d\u8db3128bit\u3002\u8fd9\u65f6\u5019\u600e\u4e48\u529e\u5462\uff1f\u5c31\u9700\u8981\u5bf9\u660e\u6587\u5757\u8fdb\u884c\u586b\u5145\uff08Padding\uff09\u3002 \u586b\u5145\u7684\u7c7b\u578b\uff1a\uff08\u4e3b\u8981\u7528\u5230\u7684\u6709\u524d\u4e09\u79cd\uff09 NoPadding PKCS7Padding ZeroPadding AnsiX923 Iso10126 Iso97971 \u6a21\u5f0f\uff1a AES\u7684\u5de5\u4f5c\u6a21\u5f0f\uff0c\u4f53\u73b0\u5728\u628a\u660e\u6587\u5757\u52a0\u5bc6\u6210\u5bc6\u6587\u5757\u7684\u5904\u7406\u8fc7\u7a0b\u4e2d\u3002AES\u52a0\u5bc6\u7b97\u6cd5\u63d0\u4f9b\u4e86\u4e94\u79cd\u4e0d\u540c\u7684\u5de5\u4f5c\u6a21\u5f0f\uff1aCBC\u3001ECB\u3001CTR\u3001CFB\u3001OFB \u6a21\u5f0f\u4e4b\u95f4\u7684\u4e3b\u9898\u601d\u60f3\u662f\u8fd1\u4f3c\u7684\uff0c\u5728\u5904\u7406\u7ec6\u8282\u4e0a\u6709\u4e00\u4e9b\u5dee\u522b\u3002 ECB\u6a21\u5f0f\uff1a ECB\u6a21\u5f0f\uff08Electronic Codebook Book\uff09\u662f\u6700\u7b80\u5355\u7684\u5de5\u4f5c\u6a21\u5f0f\uff0c\u5728\u8be5\u6a21\u5f0f\u4e0b\uff0c\u6bcf\u4e00\u4e2a\u660e\u6587\u5757\u7684\u52a0\u5bc6\u90fd\u662f\u5b8c\u5168\u72ec\u7acb\uff0c\u4e92\u4e0d\u5e72\u6d89\u7684\u3002 \u8fd9\u6837\u7684\u597d\u5904\u662f\u4ec0\u4e48\u5462\uff1f \u7b80\u5355 \u6709\u5229\u4e8e\u5e76\u884c\u8ba1\u7b97 \u7f3a\u70b9\u540c\u6837\u4e5f\u5f88\u660e\u663e\uff1a \u76f8\u540c\u7684\u660e\u6587\u5757\u7ecf\u8fc7\u52a0\u5bc6\u4f1a\u53d8\u6210\u76f8\u540c\u7684\u5bc6\u6587\u5757\uff0c\u56e0\u6b64\u5b89\u5168\u6027\u8f83\u5dee\u3002 CBC\u6a21\u5f0f\uff1a CBC\u6a21\u5f0f\uff08Cipher Block Chaining\uff09\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u6982\u5ff5\uff1a\u521d\u59cb\u5411\u91cfIV\uff08Initialization Vector\uff09\u3002IV\u662f\u505a\u4ec0\u4e48\u7528\u7684\u5462\uff1f\u5b83\u7684\u4f5c\u7528\u548cMD5\u7684\u201c\u52a0\u76d0\u201d\u6709\u4e9b\u7c7b\u4f3c\uff0c\u76ee\u7684\u662f\u9632\u6b62\u540c\u6837\u7684\u660e\u6587\u5757\u59cb\u7ec8\u52a0\u5bc6\u6210\u540c\u6837\u7684\u5bc6\u6587\u5757\u3002 CBC\u6a21\u5f0f\u5728\u6bcf\u4e00\u4e2a\u660e\u6587\u5757\u52a0\u5bc6\u524d\u4f1a\u8ba9\u660e\u6587\u5757\u548c\u4e00\u4e2a\u503c\u5148\u505a\u5f02\u6216\u64cd\u4f5c\u3002 IV\u4f5c\u4e3a\u521d\u59cb\u5316\u53d8\u91cf\uff0c\u53c2\u4e0e\u7b2c\u4e00\u4e2a\u660e\u6587\u5757\u7684\u5f02\u6216\uff0c\u540e\u7eed\u7684\u6bcf\u4e00\u4e2a\u660e\u6587\u5757\u548c\u5b83 \u524d\u4e00\u4e2a\u660e\u6587\u5757\u6240\u52a0\u5bc6\u51fa\u7684\u5bc6\u6587\u5757\u76f8\u5f02\u6216\u3002\u8fd9\u6837\u76f8\u540c\u7684\u660e\u6587\u5757\u52a0\u5bc6\u51fa\u7684\u5bc6\u6587\u5757\u663e\u7136\u662f\u4e0d\u4e00\u6837\u7684\u3002 CBC\u6a21\u5f0f\u7684\u597d\u5904\u662f\u4ec0\u4e48\u5462\uff1f\u5b89\u5168\u6027\u66f4\u9ad8 \u574f\u5904\u4e5f\u5f88\u660e\u663e\uff1a \u65e0\u6cd5\u5e76\u884c\u8ba1\u7b97\uff0c\u6027\u80fd\u4e0a\u4e0d\u5982ECB \u5f15\u5165\u521d\u59cb\u5316\u5411\u91cfIV\uff0c\u589e\u52a0\u590d\u6742\u5ea6 python\u5b9e\u73b0 from Crypto.Cipher import AES import base64 import binascii # \u6570\u636e\u7c7b class MData(): def __init__(self, data = b\"\",characterSet='utf-8'): # data\u80af\u5b9a\u4e3abytes self.data = data self.characterSet = characterSet def saveData(self,FileName): with open(FileName,'wb') as f: f.write(self.data) def fromString(self,data): self.data = data.encode(self.characterSet) return self.data def fromBase64(self,data): self.data = base64.b64decode(data.encode(self.characterSet)) return self.data def fromHexStr(self,data): self.data = binascii.a2b_hex(data) return self.data def toString(self): return self.data.decode(self.characterSet) def toBase64(self): return base64.b64encode(self.data).decode() def toHexStr(self): return binascii.b2a_hex(self.data).decode() def toBytes(self): return self.data def __str__(self): try: return self.toString() except Exception: return self.toBase64() ### \u5c01\u88c5\u7c7b class AEScryptor(): def __init__(self,key,mode,iv = '',paddingMode= \"NoPadding\",characterSet =\"utf-8\"): ''' \u6784\u5efa\u4e00\u4e2aAES\u5bf9\u8c61 key: \u79d8\u94a5\uff0c\u5b57\u8282\u578b\u6570\u636e mode: \u4f7f\u7528\u6a21\u5f0f\uff0c\u53ea\u63d0\u4f9b\u4e24\u79cd\uff0cAES.MODE_CBC, AES.MODE_ECB iv\uff1a iv\u504f\u79fb\u91cf\uff0c\u5b57\u8282\u578b\u6570\u636e paddingMode: \u586b\u5145\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u4e3aNoPadding, \u53ef\u9009NoPadding\uff0cZeroPadding\uff0cPKCS5Padding\uff0cPKCS7Padding characterSet: \u5b57\u7b26\u96c6\u7f16\u7801 ''' self.key = key self.mode = mode self.iv = iv self.characterSet = characterSet self.paddingMode = paddingMode self.data = \"\" def __ZeroPadding(self,data): data += b'\\x00' while len(data) % 16 != 0: data += b'\\x00' return data def __StripZeroPadding(self,data): data = data[:-1] while len(data) % 16 != 0: data = data.rstrip(b'\\x00') if data[-1] != b\"\\x00\": break return data def __PKCS5_7Padding(self,data): needSize = 16-len(data) % 16 if needSize == 0: needSize = 16 return data + needSize.to_bytes(1,'little')*needSize def __StripPKCS5_7Padding(self,data): paddingSize = data[-1] return data.rstrip(paddingSize.to_bytes(1,'little')) def __paddingData(self,data): if self.paddingMode == \"NoPadding\": if len(data) % 16 == 0: return data else: return self.__ZeroPadding(data) elif self.paddingMode == \"ZeroPadding\": return self.__ZeroPadding(data) elif self.paddingMode == \"PKCS5Padding\" or self.paddingMode == \"PKCS7Padding\": return self.__PKCS5_7Padding(data) else: print(\"\u4e0d\u652f\u6301Padding\") def __stripPaddingData(self,data): if self.paddingMode == \"NoPadding\": return self.__StripZeroPadding(data) elif self.paddingMode == \"ZeroPadding\": return self.__StripZeroPadding(data) elif self.paddingMode == \"PKCS5Padding\" or self.paddingMode == \"PKCS7Padding\": return self.__StripPKCS5_7Padding(data) else: print(\"\u4e0d\u652f\u6301Padding\") def setCharacterSet(self,characterSet): ''' \u8bbe\u7f6e\u5b57\u7b26\u96c6\u7f16\u7801 characterSet: \u5b57\u7b26\u96c6\u7f16\u7801 ''' self.characterSet = characterSet def setPaddingMode(self,mode): ''' \u8bbe\u7f6e\u586b\u5145\u6a21\u5f0f mode: \u53ef\u9009NoPadding\uff0cZeroPadding\uff0cPKCS5Padding\uff0cPKCS7Padding ''' self.paddingMode = mode def decryptFromBase64(self,entext): ''' \u4ecebase64\u7f16\u7801\u5b57\u7b26\u4e32\u7f16\u7801\u8fdb\u884cAES\u89e3\u5bc6 entext: \u6570\u636e\u7c7b\u578bstr ''' mData = MData(characterSet=self.characterSet) self.data = mData.fromBase64(entext) return self.__decrypt() def decryptFromHexStr(self,entext): ''' \u4ecehexstr\u7f16\u7801\u5b57\u7b26\u4e32\u7f16\u7801\u8fdb\u884cAES\u89e3\u5bc6 entext: \u6570\u636e\u7c7b\u578bstr ''' mData = MData(characterSet=self.characterSet) self.data = mData.fromHexStr(entext) return self.__decrypt() def decryptFromString(self,entext): ''' \u4ece\u5b57\u7b26\u4e32\u8fdb\u884cAES\u89e3\u5bc6 entext: \u6570\u636e\u7c7b\u578bstr ''' mData = MData(characterSet=self.characterSet) self.data = mData.fromString(entext) return self.__decrypt() def decryptFromBytes(self,entext): ''' \u4ece\u4e8c\u8fdb\u5236\u8fdb\u884cAES\u89e3\u5bc6 entext: \u6570\u636e\u7c7b\u578bbytes ''' self.data = entext return self.__decrypt() def encryptFromString(self,data): ''' \u5bf9\u5b57\u7b26\u4e32\u8fdb\u884cAES\u52a0\u5bc6 data: \u5f85\u52a0\u5bc6\u5b57\u7b26\u4e32\uff0c\u6570\u636e\u7c7b\u578b\u4e3astr ''' self.data = data.encode(self.characterSet) return self.__encrypt() def __encrypt(self): if self.mode == AES.MODE_CBC: aes = AES.new(self.key,self.mode,self.iv) elif self.mode == AES.MODE_ECB: aes = AES.new(self.key,self.mode) else: print(\"\u4e0d\u652f\u6301\u8fd9\u79cd\u6a21\u5f0f\") return data = self.__paddingData(self.data) enData = aes.encrypt(data) return MData(enData) def __decrypt(self): if self.mode == AES.MODE_CBC: aes = AES.new(self.key,self.mode,self.iv) elif self.mode == AES.MODE_ECB: aes = AES.new(self.key,self.mode) else: print(\"\u4e0d\u652f\u6301\u8fd9\u79cd\u6a21\u5f0f\") return data = aes.decrypt(self.data) mData = MData(self.__stripPaddingData(data),characterSet=self.characterSet) return mData if __name__ == '__main__': key = b\"1234567812345678\" iv = b\"0000000000000000\" aes = AEScryptor(key,AES.MODE_CBC,iv,paddingMode= \"ZeroPadding\",characterSet='utf-8') data = \"\u597d\u597d\u5b66\u4e60\" rData = aes.encryptFromString(data) print(\"\u5bc6\u6587\uff1a\",rData.toBase64()) rData = aes.decryptFromBase64(rData.toBase64()) print(\"\u660e\u6587\uff1a\",rData)","title":"Aes\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5python\u5b9e\u73b0"},{"location":"docs/aes%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95python%E5%AE%9E%E7%8E%B0/#_1","text":"AES\u7684\u52a0\u5bc6\u6d41\u7a0b\uff1a \u628a\u660e\u6587\u6309\u7167128bit\u62c6\u5206\u6210\u82e5\u5e72\u4e2a\u660e\u6587\u5757\u3002 \u6309\u7167\u9009\u62e9\u7684\u586b\u5145\u65b9\u5f0f\u6765\u586b\u5145\u6700\u540e\u4e00\u4e2a\u660e\u6587\u5757\u3002 \u6bcf\u4e00\u4e2a\u660e\u6587\u5757\u5229\u7528AES\u52a0\u5bc6\u5668\u548c\u5bc6\u94a5\uff0c\u52a0\u5bc6\u6210\u5bc6\u6587\u5757\u3002 \u62fc\u63a5\u6240\u6709\u7684\u5bc6\u6587\u5757\uff0c\u6210\u4e3a\u6700\u7ec8\u7684\u5bc6\u6587\u7ed3\u679c\u3002 \u60f3\u8981\u641e\u660e\u767dAES\u7b97\u6cd5\uff0c\u9996\u5148\u8981\u641e\u6e05\u695a\u4e09\u4e2a\u57fa\u672c\u6982\u5ff5\u3002\u79d8\u94a5\uff0c\u586b\u5145\uff0c\u6a21\u5f0f \u79d8\u94a5\uff1a \u5bf9\u79f0\u52a0\u5bc6\u4e4b\u6240\u4ee5\u5bf9\u79f0\u5c31\u662f\u56e0\u4e3a\u8fd9\u7c7b\u7b97\u6cd5\u5bf9\u660e\u6587\u7684\u52a0\u5bc6\u548c\u89e3\u5bc6\u4f7f\u7528\u7684\u662f\u540c\u4e00\u4e2a\u5bc6\u94a5\u3002 AES\u652f\u6301\u4e09\u79cd\u957f\u5ea6\u7684\u5bc6\u94a5\uff1a128\u4f4d\uff0c192\u4f4d\uff0c256\u4f4d \u586b\u5145\uff1a \u8bf4\u5230\u586b\u5145\u4e00\u5b9a\u8981\u8bf4\u4e00\u4e0b\uff0cAES \u5206\u7ec4\u52a0\u5bc6\u7684\u7279\u6027\uff0cAES \u52a0\u5bc6\u5e76\u4e0d\u662f\u4e00\u80a1\u8111\u5c06\u660e\u6587\u52a0\u5bc6\u6210\u5bc6\u6587\u7684\uff0c\u800c\u662f\u628a\u660e\u6587\u62c6\u5206\u6210\u4e00\u4e2a\u4e2a\u72ec\u7acb\u7684\u660e\u6587\u5757\uff0c\u4e14\u6bcf\u4e2a\u660e\u6587\u5757128bit\u3002 \u5047\u5982\u4e00\u6bb5\u660e\u6587\u957f\u5ea6\u662f196bit\uff0c\u5982\u679c\u6309\u6bcf128bit\u4e00\u4e2a\u660e\u6587\u5757\u6765\u62c6\u5206\u7684\u8bdd\uff0c\u7b2c\u4e8c\u4e2a\u660e\u6587\u5757\u53ea\u670964bit\uff0c\u4e0d\u8db3128bit\u3002\u8fd9\u65f6\u5019\u600e\u4e48\u529e\u5462\uff1f\u5c31\u9700\u8981\u5bf9\u660e\u6587\u5757\u8fdb\u884c\u586b\u5145\uff08Padding\uff09\u3002 \u586b\u5145\u7684\u7c7b\u578b\uff1a\uff08\u4e3b\u8981\u7528\u5230\u7684\u6709\u524d\u4e09\u79cd\uff09 NoPadding PKCS7Padding ZeroPadding AnsiX923 Iso10126 Iso97971 \u6a21\u5f0f\uff1a AES\u7684\u5de5\u4f5c\u6a21\u5f0f\uff0c\u4f53\u73b0\u5728\u628a\u660e\u6587\u5757\u52a0\u5bc6\u6210\u5bc6\u6587\u5757\u7684\u5904\u7406\u8fc7\u7a0b\u4e2d\u3002AES\u52a0\u5bc6\u7b97\u6cd5\u63d0\u4f9b\u4e86\u4e94\u79cd\u4e0d\u540c\u7684\u5de5\u4f5c\u6a21\u5f0f\uff1aCBC\u3001ECB\u3001CTR\u3001CFB\u3001OFB \u6a21\u5f0f\u4e4b\u95f4\u7684\u4e3b\u9898\u601d\u60f3\u662f\u8fd1\u4f3c\u7684\uff0c\u5728\u5904\u7406\u7ec6\u8282\u4e0a\u6709\u4e00\u4e9b\u5dee\u522b\u3002 ECB\u6a21\u5f0f\uff1a ECB\u6a21\u5f0f\uff08Electronic Codebook Book\uff09\u662f\u6700\u7b80\u5355\u7684\u5de5\u4f5c\u6a21\u5f0f\uff0c\u5728\u8be5\u6a21\u5f0f\u4e0b\uff0c\u6bcf\u4e00\u4e2a\u660e\u6587\u5757\u7684\u52a0\u5bc6\u90fd\u662f\u5b8c\u5168\u72ec\u7acb\uff0c\u4e92\u4e0d\u5e72\u6d89\u7684\u3002 \u8fd9\u6837\u7684\u597d\u5904\u662f\u4ec0\u4e48\u5462\uff1f \u7b80\u5355 \u6709\u5229\u4e8e\u5e76\u884c\u8ba1\u7b97 \u7f3a\u70b9\u540c\u6837\u4e5f\u5f88\u660e\u663e\uff1a \u76f8\u540c\u7684\u660e\u6587\u5757\u7ecf\u8fc7\u52a0\u5bc6\u4f1a\u53d8\u6210\u76f8\u540c\u7684\u5bc6\u6587\u5757\uff0c\u56e0\u6b64\u5b89\u5168\u6027\u8f83\u5dee\u3002 CBC\u6a21\u5f0f\uff1a CBC\u6a21\u5f0f\uff08Cipher Block Chaining\uff09\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u6982\u5ff5\uff1a\u521d\u59cb\u5411\u91cfIV\uff08Initialization Vector\uff09\u3002IV\u662f\u505a\u4ec0\u4e48\u7528\u7684\u5462\uff1f\u5b83\u7684\u4f5c\u7528\u548cMD5\u7684\u201c\u52a0\u76d0\u201d\u6709\u4e9b\u7c7b\u4f3c\uff0c\u76ee\u7684\u662f\u9632\u6b62\u540c\u6837\u7684\u660e\u6587\u5757\u59cb\u7ec8\u52a0\u5bc6\u6210\u540c\u6837\u7684\u5bc6\u6587\u5757\u3002 CBC\u6a21\u5f0f\u5728\u6bcf\u4e00\u4e2a\u660e\u6587\u5757\u52a0\u5bc6\u524d\u4f1a\u8ba9\u660e\u6587\u5757\u548c\u4e00\u4e2a\u503c\u5148\u505a\u5f02\u6216\u64cd\u4f5c\u3002 IV\u4f5c\u4e3a\u521d\u59cb\u5316\u53d8\u91cf\uff0c\u53c2\u4e0e\u7b2c\u4e00\u4e2a\u660e\u6587\u5757\u7684\u5f02\u6216\uff0c\u540e\u7eed\u7684\u6bcf\u4e00\u4e2a\u660e\u6587\u5757\u548c\u5b83 \u524d\u4e00\u4e2a\u660e\u6587\u5757\u6240\u52a0\u5bc6\u51fa\u7684\u5bc6\u6587\u5757\u76f8\u5f02\u6216\u3002\u8fd9\u6837\u76f8\u540c\u7684\u660e\u6587\u5757\u52a0\u5bc6\u51fa\u7684\u5bc6\u6587\u5757\u663e\u7136\u662f\u4e0d\u4e00\u6837\u7684\u3002 CBC\u6a21\u5f0f\u7684\u597d\u5904\u662f\u4ec0\u4e48\u5462\uff1f\u5b89\u5168\u6027\u66f4\u9ad8 \u574f\u5904\u4e5f\u5f88\u660e\u663e\uff1a \u65e0\u6cd5\u5e76\u884c\u8ba1\u7b97\uff0c\u6027\u80fd\u4e0a\u4e0d\u5982ECB \u5f15\u5165\u521d\u59cb\u5316\u5411\u91cfIV\uff0c\u589e\u52a0\u590d\u6742\u5ea6","title":"\u539f\u7406"},{"location":"docs/aes%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95python%E5%AE%9E%E7%8E%B0/#python","text":"from Crypto.Cipher import AES import base64 import binascii # \u6570\u636e\u7c7b class MData(): def __init__(self, data = b\"\",characterSet='utf-8'): # data\u80af\u5b9a\u4e3abytes self.data = data self.characterSet = characterSet def saveData(self,FileName): with open(FileName,'wb') as f: f.write(self.data) def fromString(self,data): self.data = data.encode(self.characterSet) return self.data def fromBase64(self,data): self.data = base64.b64decode(data.encode(self.characterSet)) return self.data def fromHexStr(self,data): self.data = binascii.a2b_hex(data) return self.data def toString(self): return self.data.decode(self.characterSet) def toBase64(self): return base64.b64encode(self.data).decode() def toHexStr(self): return binascii.b2a_hex(self.data).decode() def toBytes(self): return self.data def __str__(self): try: return self.toString() except Exception: return self.toBase64() ### \u5c01\u88c5\u7c7b class AEScryptor(): def __init__(self,key,mode,iv = '',paddingMode= \"NoPadding\",characterSet =\"utf-8\"): ''' \u6784\u5efa\u4e00\u4e2aAES\u5bf9\u8c61 key: \u79d8\u94a5\uff0c\u5b57\u8282\u578b\u6570\u636e mode: \u4f7f\u7528\u6a21\u5f0f\uff0c\u53ea\u63d0\u4f9b\u4e24\u79cd\uff0cAES.MODE_CBC, AES.MODE_ECB iv\uff1a iv\u504f\u79fb\u91cf\uff0c\u5b57\u8282\u578b\u6570\u636e paddingMode: \u586b\u5145\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u4e3aNoPadding, \u53ef\u9009NoPadding\uff0cZeroPadding\uff0cPKCS5Padding\uff0cPKCS7Padding characterSet: \u5b57\u7b26\u96c6\u7f16\u7801 ''' self.key = key self.mode = mode self.iv = iv self.characterSet = characterSet self.paddingMode = paddingMode self.data = \"\" def __ZeroPadding(self,data): data += b'\\x00' while len(data) % 16 != 0: data += b'\\x00' return data def __StripZeroPadding(self,data): data = data[:-1] while len(data) % 16 != 0: data = data.rstrip(b'\\x00') if data[-1] != b\"\\x00\": break return data def __PKCS5_7Padding(self,data): needSize = 16-len(data) % 16 if needSize == 0: needSize = 16 return data + needSize.to_bytes(1,'little')*needSize def __StripPKCS5_7Padding(self,data): paddingSize = data[-1] return data.rstrip(paddingSize.to_bytes(1,'little')) def __paddingData(self,data): if self.paddingMode == \"NoPadding\": if len(data) % 16 == 0: return data else: return self.__ZeroPadding(data) elif self.paddingMode == \"ZeroPadding\": return self.__ZeroPadding(data) elif self.paddingMode == \"PKCS5Padding\" or self.paddingMode == \"PKCS7Padding\": return self.__PKCS5_7Padding(data) else: print(\"\u4e0d\u652f\u6301Padding\") def __stripPaddingData(self,data): if self.paddingMode == \"NoPadding\": return self.__StripZeroPadding(data) elif self.paddingMode == \"ZeroPadding\": return self.__StripZeroPadding(data) elif self.paddingMode == \"PKCS5Padding\" or self.paddingMode == \"PKCS7Padding\": return self.__StripPKCS5_7Padding(data) else: print(\"\u4e0d\u652f\u6301Padding\") def setCharacterSet(self,characterSet): ''' \u8bbe\u7f6e\u5b57\u7b26\u96c6\u7f16\u7801 characterSet: \u5b57\u7b26\u96c6\u7f16\u7801 ''' self.characterSet = characterSet def setPaddingMode(self,mode): ''' \u8bbe\u7f6e\u586b\u5145\u6a21\u5f0f mode: \u53ef\u9009NoPadding\uff0cZeroPadding\uff0cPKCS5Padding\uff0cPKCS7Padding ''' self.paddingMode = mode def decryptFromBase64(self,entext): ''' \u4ecebase64\u7f16\u7801\u5b57\u7b26\u4e32\u7f16\u7801\u8fdb\u884cAES\u89e3\u5bc6 entext: \u6570\u636e\u7c7b\u578bstr ''' mData = MData(characterSet=self.characterSet) self.data = mData.fromBase64(entext) return self.__decrypt() def decryptFromHexStr(self,entext): ''' \u4ecehexstr\u7f16\u7801\u5b57\u7b26\u4e32\u7f16\u7801\u8fdb\u884cAES\u89e3\u5bc6 entext: \u6570\u636e\u7c7b\u578bstr ''' mData = MData(characterSet=self.characterSet) self.data = mData.fromHexStr(entext) return self.__decrypt() def decryptFromString(self,entext): ''' \u4ece\u5b57\u7b26\u4e32\u8fdb\u884cAES\u89e3\u5bc6 entext: \u6570\u636e\u7c7b\u578bstr ''' mData = MData(characterSet=self.characterSet) self.data = mData.fromString(entext) return self.__decrypt() def decryptFromBytes(self,entext): ''' \u4ece\u4e8c\u8fdb\u5236\u8fdb\u884cAES\u89e3\u5bc6 entext: \u6570\u636e\u7c7b\u578bbytes ''' self.data = entext return self.__decrypt() def encryptFromString(self,data): ''' \u5bf9\u5b57\u7b26\u4e32\u8fdb\u884cAES\u52a0\u5bc6 data: \u5f85\u52a0\u5bc6\u5b57\u7b26\u4e32\uff0c\u6570\u636e\u7c7b\u578b\u4e3astr ''' self.data = data.encode(self.characterSet) return self.__encrypt() def __encrypt(self): if self.mode == AES.MODE_CBC: aes = AES.new(self.key,self.mode,self.iv) elif self.mode == AES.MODE_ECB: aes = AES.new(self.key,self.mode) else: print(\"\u4e0d\u652f\u6301\u8fd9\u79cd\u6a21\u5f0f\") return data = self.__paddingData(self.data) enData = aes.encrypt(data) return MData(enData) def __decrypt(self): if self.mode == AES.MODE_CBC: aes = AES.new(self.key,self.mode,self.iv) elif self.mode == AES.MODE_ECB: aes = AES.new(self.key,self.mode) else: print(\"\u4e0d\u652f\u6301\u8fd9\u79cd\u6a21\u5f0f\") return data = aes.decrypt(self.data) mData = MData(self.__stripPaddingData(data),characterSet=self.characterSet) return mData if __name__ == '__main__': key = b\"1234567812345678\" iv = b\"0000000000000000\" aes = AEScryptor(key,AES.MODE_CBC,iv,paddingMode= \"ZeroPadding\",characterSet='utf-8') data = \"\u597d\u597d\u5b66\u4e60\" rData = aes.encryptFromString(data) print(\"\u5bc6\u6587\uff1a\",rData.toBase64()) rData = aes.decryptFromBase64(rData.toBase64()) print(\"\u660e\u6587\uff1a\",rData)","title":"python\u5b9e\u73b0"},{"location":"docs/python%E9%97%AD%E5%8C%85%E9%97%AE%E9%A2%98%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9Fnonlocal_global/","text":"","title":"\u5168\u5c40\u53d8\u91cf\u5c40\u90e8\u53d8\u91cf\u4f5c\u7528\u57df"},{"location":"docs/rsa%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/","text":"","title":"rsa\u52a0\u5bc6\u7b97\u6cd5"},{"location":"docs/%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%BC%8F/","text":"\u5206\u7ec4\u5bc6\u7801\u64cd\u4f5c\u6a21\u5f0f https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_block_chaining_(CBC)","title":"\u52a0\u5bc6\u6a21\u5f0f"},{"location":"docs/%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%BC%8F/#_1","text":"https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_block_chaining_(CBC)","title":"\u5206\u7ec4\u5bc6\u7801\u64cd\u4f5c\u6a21\u5f0f"},{"location":"docs/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95%EF%BC%8C%E5%94%AF%E5%AF%86%E6%96%87%E6%94%BB%E5%87%BB%E3%80%81%E5%B7%B2%E7%9F%A5%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB%E3%80%81%E9%80%89%E6%8B%A9%E5%AF%86%E6%96%87%E6%94%BB%E5%87%BB%E3%80%81%E9%80%89%E6%8B%A9%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB%EF%BC%88%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E4%B8%AD%EF%BC%8C%E5%9B%9B%E5%A4%A7%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%EF%BC%89/","text":"\u552f\u5bc6\u6587\u653b\u51fb\u3001\u5df2\u77e5\u660e\u6587\u653b\u51fb\u3001\u9009\u62e9\u5bc6\u6587\u653b\u51fb\u3001\u9009\u62e9\u660e\u6587\u653b\u51fb\uff08\u5bc6\u7801\u5206\u6790\u5b66\u4e2d\uff0c\u56db\u5927\u653b\u51fb\u65b9\u5f0f\uff09 \u552f\u5bc6\u6587\u653b\u51fb\uff1a\u552f\u5bc6\u6587\u653b\u51fb\u662f \u5047\u5b9a\u5bc6\u7801\u5206\u6790\u8005\u62e5\u6709\u5bc6\u7801\u7b97\u6cd5\u53ca\u660e\u6587\u7edf\u8ba1\u7279\u6027\uff0c\u5e76\u622a\u83b7\u4e00\u4e2a\u6216\u591a\u4e2a\u7528\u540c\u4e00\u5bc6\u94a5\u52a0\u5bc6\u7684\u5bc6\u6587\uff0c\u901a\u8fc7\u5bf9\u8fd9\u4e9b\u5bc6\u6587\u8fdb\u884c\u5206\u6790\u6c42\u51fa\u660e\u6587\u6216\u5bc6\u94a5\u3002 \u5728\u5b9e\u65bd\u552f\u5bc6\u6587\u653b\u51fb\u65f6\uff0c\u53ea\u6709\u5145\u5206\u638c\u63e1\u548c\u5229\u7528\u660e\u6587\u4fe1\u606f\u5982\u6587\u5b57\u3001\u56fe\u50cf\u3001\u8bed\u97f3\u3001\u8ba1\u7b97\u673a\u7a0b\u5e8f\u7b49\u7684\u5185\u5728\u89c4\u5f8b\uff0c\u624d\u6709\u53ef\u80fd\u6839\u636e\u622a\u83b7\u7684\u5bc6\u6587\u6210\u529f\u7834\u8bd1\u5bc6\u7801\u3002\u552f\u5bc6\u6587\u653b\u51fb\u5df2\u77e5\u6761\u4ef6\u6700\u5c11\u3002\u7ecf\u4e0d\u8d77\u552f\u5bc6\u6587\u653b\u51fb\u7684\u5bc6\u7801\u88ab\u8ba4\u4e3a\u662f \u4e0d\u5b89\u5168\u7684 \u3002 \u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\u5df2\u77e5\u5bc6\u6587\u7684\u7a77\u4e3e\u653b\u51fb\uff0c\u4e5f\u4ec5\u77e5\u9053\u5bc6\u6587 \u5df2\u77e5\u660e\u6587\u653b\u51fb\uff1a\u5df2\u77e5\u660e\u6587\u653b\u51fb\u6307 \u653b\u51fb\u8005\u638c\u63e1\u4e86\u67d0\u6bb5\u660e\u6587x\u548c\u5bf9\u5e94\u5bc6\u6587y\u3002 \u5e0c\u5c14\u5bc6\u7801\u4f9d\u8d56\u552f\u5bc6\u6587\u653b\u51fb\u8f83\u96be\u7834\u89e3\uff0c\u800c\u901a\u8fc7\u5df2\u77e5\u660e\u6587\u653b\u51fb\u5219\u5bb9\u6613\u653b\u7834\u3002 \u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\u5df2\u77e5\u90e8\u5206\u660e\u6587\u53ca\u5176\u5bf9\u5e94\u7684\u5bc6\u6587\uff0c\u8fdb\u884c\u5206\u6790\u7834\u89e3 \u9009\u62e9\u660e\u6587\u653b\u51fb\uff1a\u9009\u62e9\u660e\u6587\u653b\u51fb\u6307\u7684\u662f\u4e00\u79cd\u653b\u51fb\u6a21\u5f0f\u3002\u653b\u51fb\u8005\u62e5\u6709\u52a0\u5bc6\u673a\u7684\u8bbf\u95ee\u6743\u9650\uff0c \u53ef\u6784\u9020\u4efb\u610f\u660e\u6587\u6240\u5bf9\u5e94\u7684\u5bc6\u6587 \u3002\u5728\u9009\u62e9\u660e\u6587\u653b\u51fb\u65f6\uff0c\u5bc6\u7801\u5206\u6790\u8005\u5bf9\u660e\u6587\u6709\u9009\u62e9\u6216\u63a7\u5236\u7684\u80fd\u529b\uff0c\u53ef \u9009\u62e9\u4ed6\u8ba4\u4e3a\u6709\u5229\u4e8e\u653b\u51fb\u7684\u4efb\u4f55\u660e\u6587\u53ca\u5176\u5bf9\u5e94\u7684\u5bc6\u6587 \uff0c\u662f\u4e00\u79cd\u6bd4\u5df2\u77e5\u660e\u6587\u653b\u51fb\u66f4\u5f3a\u7684\u653b\u51fb\u65b9\u5f0f\u3002 \u5982\u679c\u4e00\u4e2a\u5bc6\u7801\u7cfb\u7edf\u80fd\u591f\u62b5\u6297\u9009\u62e9\u660e\u6587\u653b\u51fb\uff0c\u90a3\u4e48\u5fc5\u7136\u80fd\u591f\u62b5\u6297\u552f\u5bc6\u6587\u653b\u51fb\u548c\u5df2\u77e5\u660e\u6587\u653b\u51fb \u3002 \u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\u77e5\u9053\u660e\u6587\u5c31\u77e5\u9053\u5bc6\u6587 \u9009\u62e9\u5bc6\u6587\u653b\u51fb\uff1a\u653b\u51fb\u8005 \u638c\u63e1\u5bf9\u89e3\u5bc6\u673a\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u53ef\u4ee5\u9009\u62e9\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6 \u3002\u5bc6\u7801\u5206\u6790\u8005\u5bf9\u5bc6\u6587\u6709\u9009\u62e9\u6216\u63a7\u5236\u7684\u80fd\u529b\uff0c \u53ef\u9009\u62e9\u4ed6\u8ba4\u4e3a\u6709\u5229\u4e8e\u653b\u51fb\u7684\u4efb\u4f55\u5bc6\u6587\u53ca\u5176\u5bf9\u5e94\u7684\u660e\u6587\uff0c\u662f\u4e00\u79cd\u6bd4\u5df2\u77e5\u660e\u6587\u653b\u51fb\u66f4\u5f3a\u7684\u653b\u51fb\u65b9\u5f0f \u3002\u5982\u679c\u4e00\u4e2a\u5bc6\u7801\u7cfb\u7edf\u80fd\u591f\u62b5\u6297\u9009\u62e9\u5bc6\u6587\u653b\u51fb\uff0c \u90a3\u4e48\u5fc5\u7136\u80fd\u591f\u62b5\u6297\u552f\u5bc6\u6587\u653b\u51fb\u548c\u5df2\u77e5\u660e\u6587\u653b\u51fb \u3002\u9009\u62e9\u5bc6\u6587\u653b\u51fb \u4e3b\u8981\u7528\u4e8e\u5206\u6790\u516c\u94a5\u5bc6\u7801\u4f53\u5236 \uff0c\u5982\u9488\u5bf9RSA\u516c\u94a5\u5bc6\u7801\u4f53\u5236\u7684\u9009\u62e9\u5bc6\u6587\u653b\u51fb\u3002 \u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\u77e5\u9053\u5bc6\u6587\u5c31\u4f1a\u77e5\u9053\u660e\u6587 \u5bc6\u7801\u7cfb\u7edf\u53ea\u6709\u7ecf\u5f97\u8d77\u9009\u62e9\u660e\u6587\u653b\u51fb\u548c\u9009\u62e9\u5bc6\u6587\u653b\u51fb\uff0c\u624d\u79f0\u5f97\u4e0a\u662f\u5b89\u5168\u7684\u3002 \u7efc\u4e0a\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\uff1a \u653b\u51fb\u5f3a\u5ea6\uff1a\u9009\u62e9\u5bc6\u6587\u653b\u51fb > \u9009\u62e9\u660e\u6587\u653b\u51fb > \u5df2\u77e5\u660e\u6587\u653b\u51fb > \u552f\u5bc6\u6587\u653b\u51fb \u4f46\u662f\u5b9e\u73b0\u7684\u96be\u6613\u7a0b\u5ea6\uff1a\u4e5f\u662f\u76f8\u53cd\u7684 \u3002","title":"\u52a0\u5bc6\u7b97\u6cd5\u653b\u51fb"},{"location":"docs/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95%EF%BC%8C%E5%94%AF%E5%AF%86%E6%96%87%E6%94%BB%E5%87%BB%E3%80%81%E5%B7%B2%E7%9F%A5%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB%E3%80%81%E9%80%89%E6%8B%A9%E5%AF%86%E6%96%87%E6%94%BB%E5%87%BB%E3%80%81%E9%80%89%E6%8B%A9%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB%EF%BC%88%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E4%B8%AD%EF%BC%8C%E5%9B%9B%E5%A4%A7%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%EF%BC%89/#_1","text":"\u552f\u5bc6\u6587\u653b\u51fb\uff1a\u552f\u5bc6\u6587\u653b\u51fb\u662f \u5047\u5b9a\u5bc6\u7801\u5206\u6790\u8005\u62e5\u6709\u5bc6\u7801\u7b97\u6cd5\u53ca\u660e\u6587\u7edf\u8ba1\u7279\u6027\uff0c\u5e76\u622a\u83b7\u4e00\u4e2a\u6216\u591a\u4e2a\u7528\u540c\u4e00\u5bc6\u94a5\u52a0\u5bc6\u7684\u5bc6\u6587\uff0c\u901a\u8fc7\u5bf9\u8fd9\u4e9b\u5bc6\u6587\u8fdb\u884c\u5206\u6790\u6c42\u51fa\u660e\u6587\u6216\u5bc6\u94a5\u3002 \u5728\u5b9e\u65bd\u552f\u5bc6\u6587\u653b\u51fb\u65f6\uff0c\u53ea\u6709\u5145\u5206\u638c\u63e1\u548c\u5229\u7528\u660e\u6587\u4fe1\u606f\u5982\u6587\u5b57\u3001\u56fe\u50cf\u3001\u8bed\u97f3\u3001\u8ba1\u7b97\u673a\u7a0b\u5e8f\u7b49\u7684\u5185\u5728\u89c4\u5f8b\uff0c\u624d\u6709\u53ef\u80fd\u6839\u636e\u622a\u83b7\u7684\u5bc6\u6587\u6210\u529f\u7834\u8bd1\u5bc6\u7801\u3002\u552f\u5bc6\u6587\u653b\u51fb\u5df2\u77e5\u6761\u4ef6\u6700\u5c11\u3002\u7ecf\u4e0d\u8d77\u552f\u5bc6\u6587\u653b\u51fb\u7684\u5bc6\u7801\u88ab\u8ba4\u4e3a\u662f \u4e0d\u5b89\u5168\u7684 \u3002 \u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\u5df2\u77e5\u5bc6\u6587\u7684\u7a77\u4e3e\u653b\u51fb\uff0c\u4e5f\u4ec5\u77e5\u9053\u5bc6\u6587 \u5df2\u77e5\u660e\u6587\u653b\u51fb\uff1a\u5df2\u77e5\u660e\u6587\u653b\u51fb\u6307 \u653b\u51fb\u8005\u638c\u63e1\u4e86\u67d0\u6bb5\u660e\u6587x\u548c\u5bf9\u5e94\u5bc6\u6587y\u3002 \u5e0c\u5c14\u5bc6\u7801\u4f9d\u8d56\u552f\u5bc6\u6587\u653b\u51fb\u8f83\u96be\u7834\u89e3\uff0c\u800c\u901a\u8fc7\u5df2\u77e5\u660e\u6587\u653b\u51fb\u5219\u5bb9\u6613\u653b\u7834\u3002 \u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\u5df2\u77e5\u90e8\u5206\u660e\u6587\u53ca\u5176\u5bf9\u5e94\u7684\u5bc6\u6587\uff0c\u8fdb\u884c\u5206\u6790\u7834\u89e3 \u9009\u62e9\u660e\u6587\u653b\u51fb\uff1a\u9009\u62e9\u660e\u6587\u653b\u51fb\u6307\u7684\u662f\u4e00\u79cd\u653b\u51fb\u6a21\u5f0f\u3002\u653b\u51fb\u8005\u62e5\u6709\u52a0\u5bc6\u673a\u7684\u8bbf\u95ee\u6743\u9650\uff0c \u53ef\u6784\u9020\u4efb\u610f\u660e\u6587\u6240\u5bf9\u5e94\u7684\u5bc6\u6587 \u3002\u5728\u9009\u62e9\u660e\u6587\u653b\u51fb\u65f6\uff0c\u5bc6\u7801\u5206\u6790\u8005\u5bf9\u660e\u6587\u6709\u9009\u62e9\u6216\u63a7\u5236\u7684\u80fd\u529b\uff0c\u53ef \u9009\u62e9\u4ed6\u8ba4\u4e3a\u6709\u5229\u4e8e\u653b\u51fb\u7684\u4efb\u4f55\u660e\u6587\u53ca\u5176\u5bf9\u5e94\u7684\u5bc6\u6587 \uff0c\u662f\u4e00\u79cd\u6bd4\u5df2\u77e5\u660e\u6587\u653b\u51fb\u66f4\u5f3a\u7684\u653b\u51fb\u65b9\u5f0f\u3002 \u5982\u679c\u4e00\u4e2a\u5bc6\u7801\u7cfb\u7edf\u80fd\u591f\u62b5\u6297\u9009\u62e9\u660e\u6587\u653b\u51fb\uff0c\u90a3\u4e48\u5fc5\u7136\u80fd\u591f\u62b5\u6297\u552f\u5bc6\u6587\u653b\u51fb\u548c\u5df2\u77e5\u660e\u6587\u653b\u51fb \u3002 \u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\u77e5\u9053\u660e\u6587\u5c31\u77e5\u9053\u5bc6\u6587 \u9009\u62e9\u5bc6\u6587\u653b\u51fb\uff1a\u653b\u51fb\u8005 \u638c\u63e1\u5bf9\u89e3\u5bc6\u673a\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u53ef\u4ee5\u9009\u62e9\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6 \u3002\u5bc6\u7801\u5206\u6790\u8005\u5bf9\u5bc6\u6587\u6709\u9009\u62e9\u6216\u63a7\u5236\u7684\u80fd\u529b\uff0c \u53ef\u9009\u62e9\u4ed6\u8ba4\u4e3a\u6709\u5229\u4e8e\u653b\u51fb\u7684\u4efb\u4f55\u5bc6\u6587\u53ca\u5176\u5bf9\u5e94\u7684\u660e\u6587\uff0c\u662f\u4e00\u79cd\u6bd4\u5df2\u77e5\u660e\u6587\u653b\u51fb\u66f4\u5f3a\u7684\u653b\u51fb\u65b9\u5f0f \u3002\u5982\u679c\u4e00\u4e2a\u5bc6\u7801\u7cfb\u7edf\u80fd\u591f\u62b5\u6297\u9009\u62e9\u5bc6\u6587\u653b\u51fb\uff0c \u90a3\u4e48\u5fc5\u7136\u80fd\u591f\u62b5\u6297\u552f\u5bc6\u6587\u653b\u51fb\u548c\u5df2\u77e5\u660e\u6587\u653b\u51fb \u3002\u9009\u62e9\u5bc6\u6587\u653b\u51fb \u4e3b\u8981\u7528\u4e8e\u5206\u6790\u516c\u94a5\u5bc6\u7801\u4f53\u5236 \uff0c\u5982\u9488\u5bf9RSA\u516c\u94a5\u5bc6\u7801\u4f53\u5236\u7684\u9009\u62e9\u5bc6\u6587\u653b\u51fb\u3002 \u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\u77e5\u9053\u5bc6\u6587\u5c31\u4f1a\u77e5\u9053\u660e\u6587 \u5bc6\u7801\u7cfb\u7edf\u53ea\u6709\u7ecf\u5f97\u8d77\u9009\u62e9\u660e\u6587\u653b\u51fb\u548c\u9009\u62e9\u5bc6\u6587\u653b\u51fb\uff0c\u624d\u79f0\u5f97\u4e0a\u662f\u5b89\u5168\u7684\u3002 \u7efc\u4e0a\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\uff1a \u653b\u51fb\u5f3a\u5ea6\uff1a\u9009\u62e9\u5bc6\u6587\u653b\u51fb > \u9009\u62e9\u660e\u6587\u653b\u51fb > \u5df2\u77e5\u660e\u6587\u653b\u51fb > \u552f\u5bc6\u6587\u653b\u51fb \u4f46\u662f\u5b9e\u73b0\u7684\u96be\u6613\u7a0b\u5ea6\uff1a\u4e5f\u662f\u76f8\u53cd\u7684 \u3002","title":"\u552f\u5bc6\u6587\u653b\u51fb\u3001\u5df2\u77e5\u660e\u6587\u653b\u51fb\u3001\u9009\u62e9\u5bc6\u6587\u653b\u51fb\u3001\u9009\u62e9\u660e\u6587\u653b\u51fb\uff08\u5bc6\u7801\u5206\u6790\u5b66\u4e2d\uff0c\u56db\u5927\u653b\u51fb\u65b9\u5f0f\uff09"},{"location":"math/probability/probability%20graph%20of%20throwing%20a%20coin/","text":"probability graph of throwing a coin %% probability graph of throw coin graph LR %%START((START)) --1--> S0((NULL)) S0((NULL)) --1/2-->S0 S0 --1/2--> S1((H)) S1 --1/2--> S0 S1 --1/2--> S2((HH)) S2 --1/2--> S0 S2 --1/2--> S3((HHH)) %%S3 --1--> END((WIN)) $E_N=\\frac{1}{2}(E_N+1)+\\frac{1}{2}(E_H+1)+\\frac{1}{2}(E_{HH}+1)$ %% probability graph of throw coin graph LR %%START((START)) --1--> S0((NULL)) S0((NULL)) --1/2-->S0 S0 --1/2--> S1((H)) %%S3 --1--> END((WIN)) $E_H=\\frac{1}{2}(E_N+1)+\\frac{1}{2}(E_H+1)+\\frac{1}{2}(E_{HH}+1)$","title":"\u786c\u5e01"},{"location":"math/probability/probability%20graph%20of%20throwing%20a%20coin/#probability-graph-of-throwing-a-coin","text":"%% probability graph of throw coin graph LR %%START((START)) --1--> S0((NULL)) S0((NULL)) --1/2-->S0 S0 --1/2--> S1((H)) S1 --1/2--> S0 S1 --1/2--> S2((HH)) S2 --1/2--> S0 S2 --1/2--> S3((HHH)) %%S3 --1--> END((WIN)) $E_N=\\frac{1}{2}(E_N+1)+\\frac{1}{2}(E_H+1)+\\frac{1}{2}(E_{HH}+1)$ %% probability graph of throw coin graph LR %%START((START)) --1--> S0((NULL)) S0((NULL)) --1/2-->S0 S0 --1/2--> S1((H)) %%S3 --1--> END((WIN)) $E_H=\\frac{1}{2}(E_N+1)+\\frac{1}{2}(E_H+1)+\\frac{1}{2}(E_{HH}+1)$","title":"probability graph of throwing a coin"}]}